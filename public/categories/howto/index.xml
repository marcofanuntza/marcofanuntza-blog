<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howto on Howto e esperienze di shell..</title>
    <link>https://marcofanuntza.it/categories/howto/</link>
    <description>Recent content in Howto on Howto e esperienze di shell..</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it-it</language>
    <lastBuildDate>Sat, 21 Dec 2024 08:59:48 +0100</lastBuildDate>
    <atom:link href="https://marcofanuntza.it/categories/howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abilitiamo il Gitlab Container Registry</title>
      <link>https://marcofanuntza.it/posts/abilitiamo-il-gitlab-container-registry/</link>
      <pubDate>Sat, 21 Dec 2024 08:59:48 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/abilitiamo-il-gitlab-container-registry/</guid>
      <description>&lt;p&gt;Nel precedente articolo avevo mostrato come procedere all&amp;rsquo;installazione di GitLab su un nostro server locale, &lt;a href=&#34;https://marcofanuntza.it/posts/installiamo-gitlab/&#34;&gt;clicca qui per leggerlo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GitLab è uno strumento leader nel mondo DevOps, oggi è tra i più diffusi per il versionamento del proprio codice software, ma oltre a questo è molto di più!&lt;br&gt;
GitLab tra le tante funzionalità, mette a disposizione anche un Container Registry.&lt;/p&gt;
&lt;p&gt;Il &lt;strong&gt;GitLab Container Registry&lt;/strong&gt; è un registro integrato all&amp;rsquo;interno di GitLab stesso, che consente di archiviare, condividere e distribuire facilmente le immagini dei container all&amp;rsquo;interno dei progetti GitLab.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Come eseguo backup dei volumi Docker</title>
      <link>https://marcofanuntza.it/posts/come-eseguo-backup-volumi-docker/</link>
      <pubDate>Wed, 04 Dec 2024 10:59:48 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/come-eseguo-backup-volumi-docker/</guid>
      <description>&lt;p&gt;Come eseguo il backup dei volumi Docker? Niente di più semplice!&lt;/p&gt;
&lt;p&gt;Tralasciando la pappardella su quanto sia importante avere dei backup vi mostro come eseguo il backup dei volumi Docker presenti sul mio Raspberry Pi 5&lt;/p&gt;
&lt;p&gt;Eseguo applicazioni in self hosting e alcune sono dei container Docker, ho citato il Raspberry ma la stessa procedura può essere utilizzata su qualsiasi altra distribuzione Linux&lt;/p&gt;
&lt;p&gt;Partiamo dal presupposto che utilizziate Docker che esegue dei container e che questi abbiano dei volumi persistenti come nel mio caso.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installiamo Gitlab</title>
      <link>https://marcofanuntza.it/posts/installiamo-gitlab/</link>
      <pubDate>Sun, 11 Feb 2024 10:59:48 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/installiamo-gitlab/</guid>
      <description>&lt;p&gt;Questo articolo continua la serie denominata &amp;ldquo;Il potere CI/CD&amp;rdquo;, in precedenza abbiamo mostrato come installare ArgoCD, poi siamo passati al registry con Harbor, adesso è arrivato il momento di Gitlab.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Che cos&amp;rsquo;è Gitlab?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GitLab è una piattaforma per la gestione del software basata su Git, fornisce un vasto set di strumenti per favorire la collaborazione, automatizzare processi e monitorare lo sviluppo del software durante il suo ciclo di vita.&lt;/p&gt;
&lt;p&gt;Ecco alcuni aspetti chiave di GitLab:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Harbor come Registry</title>
      <link>https://marcofanuntza.it/posts/harbor-come-registry/</link>
      <pubDate>Wed, 31 Jan 2024 11:26:58 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/harbor-come-registry/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Harbor&lt;/strong&gt; è un registry open-source per la gestione delle immagini dei container. Progettato per funzionare con orchestration tools come Kubernetes e Docker Swarm.&lt;/p&gt;
&lt;p&gt;Ecco alcune caratteristiche principali di Harbor:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Harbor&lt;/strong&gt; offre un registry sicuro e privato per le immagini dei container, permettendo un controllo totale sulla loro archiviazione e distribuzione.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Politiche di Sicurezza:&lt;/strong&gt; Supporta politiche per garantire che solo immagini sicure e approvate vengano utilizzate nell&amp;rsquo;ambiente.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Controllo degli Accessi:&lt;/strong&gt; Dispone di un sistema robusto di controllo degli accessi, consentendo la definizione precisa di chi può accedere e distribuire immagini specifiche.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installiamo Argocd</title>
      <link>https://marcofanuntza.it/posts/installiamo-argocd/</link>
      <pubDate>Fri, 26 Jan 2024 09:02:24 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/installiamo-argocd/</guid>
      <description>&lt;p&gt;&lt;strong&gt;ARGO CD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Argo CD è uno strumento open-source progettato per implementare e gestire il CD (continous deployment) su infrastrutture Kubernetes.
Si basa sui principi GitOps, utilizza repository Git come unica fonte di verità per la configurazione dell&amp;rsquo;infrastruttura e delle applicazioni.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I principali punti chiave di ARGO CD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuous Deployment:&lt;/strong&gt; ARGO CD automatizza il processo di implementazione delle applicazioni su cluster Kubernetes, garantendo che lo stato attuale corrisponda a quello dichiarato nel repository Git.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proviamo Kubernetes con Kind</title>
      <link>https://marcofanuntza.it/posts/proviamo-kubernetes-con-kind/</link>
      <pubDate>Thu, 25 Jan 2024 10:37:46 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/proviamo-kubernetes-con-kind/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Proviamo Kubernetes con Kind&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Questa guida è indicata per tutti coloro che hanno esigenza di interagire con un cluster Kubernetes per meri scopi di test, conoscenza e sviluppo utilizzando una workstation o notebook con risorse limitate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kind (Kubernetes IN Docker)&lt;/strong&gt; è uno strumento open-source progettato per semplificare la creazione e la gestione di cluster Kubernetes locali utilizzando container Docker come nodi del cluster.&lt;/p&gt;
&lt;p&gt;Ecco alcune caratteristiche chiave di kind:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installazione Semplificata:&lt;/strong&gt; kind semplifica notevolmente il processo di installazione di Kubernetes su una macchina locale, consentendo agli sviluppatori di creare rapidamente e facilmente cluster Kubernetes per scopi di sviluppo o test.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proviamo Kubernetes con Rancher</title>
      <link>https://marcofanuntza.it/posts/proviamo-kubernetes-e-rancher-con-k3d/</link>
      <pubDate>Wed, 17 Jan 2024 09:01:55 +0100</pubDate>
      <guid>https://marcofanuntza.it/posts/proviamo-kubernetes-e-rancher-con-k3d/</guid>
      <description>&lt;p&gt;Kubernetes è un sistema di gestione (orchestratore) di container che è diventato di fatto lo standard per distribuire applicazioni containerizzate.&lt;/p&gt;
&lt;p&gt;Questo perché Kubernetes è potente, affidabile, flessibile e per lo più facile da usare (come no).&lt;/p&gt;
&lt;p&gt;Si facile da utilizzare dopo che si supera il primo scoglio iniziale..&lt;/p&gt;
&lt;p&gt;Io personalmente ho avuto difficoltà nel visualizzare mentalmente il cluster e tutti i componenti che ne facevano parte utilizzando solo gli strumenti della riga di comando finché non ho familiarizzato con la sua struttura.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
